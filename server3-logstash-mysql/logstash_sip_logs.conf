input {
  file {
    path => "/var/log/asterisk/pjsip"   # Path to your SIP log files
    start_position => "beginning"          # Start from the beginning of the file
    sincedb_path => "/dev/null"            # Avoid keeping state for file reading
    codec => "plain"                        # Read raw SIP logs
  }
}

filter {
  # Extract SIP message types
  grok {
    match => { "message" => [
      "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME} asterisk\[%{POSINT}\]: INVITE sip:%{NOTSPACE:to_sip} SIP/2.0",
      "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME} asterisk\[%{POSINT}\]: SIP/2.0 100 Trying",
      "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME} asterisk\[%{POSINT}\]: SIP/2.0 200 OK",
      "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME} asterisk\[%{POSINT}\]: ACK sip:%{NOTSPACE:to_sip} SIP/2.0",
      "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME} asterisk\[%{POSINT}\]: BYE sip:%{NOTSPACE:to_sip} SIP/2.0"
    ]}
  }

  # Extract Call-ID
  grok {
    match => { "message" => "Call-ID: %{DATA:call_id}" }
  }

  # Extract SDP Content (if available)
  grok {
    match => { "message" => "Content-Type: application/sdp%{GREEDYDATA:sdp_content}" }
  }

  # Extract other SIP headers (From, To, CSeq)
  grok {
    match => {
      "message" => [
        "From: <%{DATA:from_sip}>",
        "To: <%{DATA:to_sip}>",
        "CSeq: %{NUMBER:cseq} %{DATA:cseq_method}"
      ]
    }
  }

  # Normalize the timestamp format
  date {
    match => ["timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601"]
    target => "@timestamp"
  }

  # Ensure fields have default values if missing
  mutate {
    add_field => {
      "call_group" => "%{call_id}"
    }
    convert => {
      "cseq" => "integer"
    }
  }

  # Remove empty fields
  mutate {
    remove_field => ["timestamp"]
  }
}

output {
  # Output to MySQL
  jdbc {
    driver_jar_path => "/usr/share/logstash/vendor/jar/jdbc/mysql-connector-java-8.0.11.jar"
    driver_class => "com.mysql.cj.jdbc.Driver"
    connection_string => "jdbc:mysql://localhost:3306/sip_logs_db?useSSL=false"
    username => "root"
    password => "Welcome@123"

    # Insert SIP data into MySQL using placeholders (prevents SQL injection)
    statement => [
      "INSERT INTO sip_transactions (call_id, from_sip, to_sip, cseq, sdp_content, timestamp) 
       VALUES (?, ?, ?, ?, ?, ?)",
      "call_id", "from_sip", "to_sip", "cseq", "sdp_content", "@timestamp"
    ]
  }

  # Output for debugging (optional)
  stdout {
    codec => rubydebug
  }
}

